//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IMathService")]
public interface IMathService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Add", ReplyAction="http://tempuri.org/IMathService/AddResponse")]
    int Add(int num1, int num2);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Add", ReplyAction="http://tempuri.org/IMathService/AddResponse")]
    System.Threading.Tasks.Task<int> AddAsync(int num1, int num2);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Subtract", ReplyAction="http://tempuri.org/IMathService/SubtractResponse")]
    int Subtract(int num1, int num2);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Subtract", ReplyAction="http://tempuri.org/IMathService/SubtractResponse")]
    System.Threading.Tasks.Task<int> SubtractAsync(int num1, int num2);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Multiply", ReplyAction="http://tempuri.org/IMathService/MultiplyResponse")]
    int Multiply(int num1, int num2);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Multiply", ReplyAction="http://tempuri.org/IMathService/MultiplyResponse")]
    System.Threading.Tasks.Task<int> MultiplyAsync(int num1, int num2);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Divide", ReplyAction="http://tempuri.org/IMathService/DivideResponse")]
    int Divide(int num1, int num2);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Divide", ReplyAction="http://tempuri.org/IMathService/DivideResponse")]
    System.Threading.Tasks.Task<int> DivideAsync(int num1, int num2);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IMathServiceChannel : IMathService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class MathServiceClient : System.ServiceModel.ClientBase<IMathService>, IMathService
{
    
    public MathServiceClient()
    {
    }
    
    public MathServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MathServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MathServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MathServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public int Add(int num1, int num2)
    {
        return base.Channel.Add(num1, num2);
    }
    
    public System.Threading.Tasks.Task<int> AddAsync(int num1, int num2)
    {
        return base.Channel.AddAsync(num1, num2);
    }
    
    public int Subtract(int num1, int num2)
    {
        return base.Channel.Subtract(num1, num2);
    }
    
    public System.Threading.Tasks.Task<int> SubtractAsync(int num1, int num2)
    {
        return base.Channel.SubtractAsync(num1, num2);
    }
    
    public int Multiply(int num1, int num2)
    {
        return base.Channel.Multiply(num1, num2);
    }
    
    public System.Threading.Tasks.Task<int> MultiplyAsync(int num1, int num2)
    {
        return base.Channel.MultiplyAsync(num1, num2);
    }
    
    public int Divide(int num1, int num2)
    {
        return base.Channel.Divide(num1, num2);
    }
    
    public System.Threading.Tasks.Task<int> DivideAsync(int num1, int num2)
    {
        return base.Channel.DivideAsync(num1, num2);
    }
}
